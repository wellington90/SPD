
"""
Vamos resolver este problema de forma eficiente usando um mapa hash (dicion√°rio em Python) para atingir uma complexidade de tempo de
ùëÇ(ùëõ) Sobre‚Äã.

Plano:
1¬∞ Iterar pelo array nums.
2¬∞ Para cada elemento, calcule o valor do complemento necess√°rio para atingir target(ou seja, complement = target - nums[i]).
3¬∞ Verifique se o complemento j√° est√° no mapa hash.
    - Se for, retorne os √≠ndices do elemento atual e do complemento.
    - Caso contr√°rio, adicione o elemento atual e seu √≠ndice ao mapa hash.
"""


def two_sum(nums, target):
    """
    Retorna os √≠ndices dos dois n√∫meros na lista nums que somam para o target.

    Args:
        nums (List[int]): Lista de inteiros.
        target (int): Valor alvo que a soma de dois elementos de nums deve alcan√ßar.

    Returns:
        List[int]: Lista contendo os √≠ndices dos dois n√∫meros que somam para o target.
    """
    # Cria um dicion√°rio para armazenar os n√∫meros e seus respectivos √≠ndices
    num_to_index = {}

    # Itera sobre a lista nums com seus √≠ndices
    for i, num in enumerate(nums):
        # Calcula o complemento necess√°rio para atingir o target
        complement = target - num

        # Verifica se o complemento j√° est√° no dicion√°rio
        if complement in num_to_index:
            # Se estiver, retorna os √≠ndices do n√∫mero atual e do complemento
            return [num_to_index[complement], i]

        # Caso contr√°rio, adiciona o n√∫mero atual e seu √≠ndice ao dicion√°rio
        num_to_index[num] = i

    # Se n√£o encontrar uma solu√ß√£o (de acordo com o enunciado, sempre haver√° uma solu√ß√£o)
    return []

# Exemplo de uso
nums1 = [2, 7, 11, 15]
target1 = 9
output1 = two_sum(nums1, target1)
print(f"Output: {output1}")  # Output esperado: [0, 1]

nums2 = [3, 2, 4]
target2 = 6
output2 = two_sum(nums2, target2)
print(f"Output: {output2}")  # Output esperado: [1, 2]

nums3 = [3, 3]
target3 = 6
output3 = two_sum(nums3, target3)
print(f"Output: {output3}")  # Output esperado: [0, 1]



"""
Explica√ß√£o do c√≥digo:
Dicion√°rio num_to_index: Armazena os n√∫meros da lista como chaves e seus √≠ndices como valores.
Itera√ß√£o com enumerate: Permite acessar tanto o √≠ndice quanto o valor de cada elemento da lista.
C√°lculo do Complemento: Para cada elemento, calcula o valor que, somado ao elemento atual, iguala ao target.
Verifica√ß√£o no Dicion√°rio: Se o complemento j√° estiver no dicion√°rio, significa que encontramos os dois n√∫meros cuja soma √© igual ao target.
Atualiza√ß√£o do Dicion√°rio: Se o complemento n√£o estiver no dicion√°rio, adiciona o elemento atual e seu √≠ndice ao dicion√°rio.
Vamos testar o c√≥digo para garantir que ele est√° funcionando corretamente.

[python] Os resultados dos testes confirmam que a fun√ß√£o two_sum est√° funcionando corretamente. Aqui est√£o os resultados detalhados:

Exemplo 1:
Entrada: nums = [2, 7, 11, 15], target = 9
Sa√≠da: [0, 1]
Explica√ß√£o: nums[0] + nums[1] == 9, portanto retornamos [0, 1].

Exemplo 2:
Entrada: nums = [3, 2, 4], target = 6
Sa√≠da: [1, 2]
Explica√ß√£o: nums[1] + nums[2] == 6, portanto retornamos [1, 2].

Exemplo 3:
Entrada: nums = [3, 3], target = 6
Sa√≠da: [0, 1]
Explica√ß√£o: nums[0] + nums[1] == 6, portanto retornamos [0, 1].
"""